/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/**
 * @file	FSFullTextSearch.h
 * @brief	This file contains definitions of object-c APIs for Foxit PDF SDK.
 *          The full text search feature relies on the SQLite data base engine which is from iOS SDK,
 *          depends on which version of iOS SDK is currently used for you project.
 */

#import "FSCommon.h"

NS_ASSUME_NONNULL_BEGIN
/** @brief Callback to received the search result, caller should inherit this class, and implement their own class. */
@interface FSSearchCallback : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/** @brief Default initialization. */
-(id)init;
/**
 * @brief	Get the search result information.
 *
 * @param[in]	filePath            The file path for the matched result.
 * @param[in]   pageIndex           The index of page which the result is on.
 * @param[in]   matchResult         The found matched result.
 * @param[in]   matchStartTextIndex The start text index on the page.
 * @param[in]   matchEndTextIndex   The end text index on the page.
 *
 * @return If non-zero is returned, the search engine will stop searching, else it will continue to search until all the matched ones returned.
 */
-(int)retrieveSearchResult: (NSString*)filePath pageIndex: (int)pageIndex matchResult: (NSString *)matchResult matchStartTextIndex: (int)matchStartTextIndex matchEndTextIndex: (int)matchEndTextIndex;

/** @brief Free the object. */
-(void)dealloc;

@end

/** @brief A class for representing documents source. */
@interface FSDocumentsSource : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief	Get the document source information.
 *
 * @param[in]	directory          The full path of local directory.
 *
 * @return  The document soure object.
 */
-(id)initWithDirectory: (NSString *)directory;

-(id)init NS_UNAVAILABLE;

/** @brief Free the object. */
-(void)dealloc;

@end

/** @brief Rand mode for searching. */
typedef NS_ENUM(NSUInteger, FSRankMode) {
    /** @brief No rank. */
    e_rankNone,
    /** @brief Rank by hit count, in ascending order. */
    e_rankHitCountASC,
    /** @brief Rank by hit count, in descending order. */
    e_rankHitCountDESC
};

/** @brief A class implement the full text search feature.*/
@interface FSFullTextSearch : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/** @brief Create a full text search object. */
-(id)init;
/** @brief Set the path of data base , which stores the indexed data. */
-(void)setDataBasePath:(NSString *)pathOfDataBase;
/**
 * @brief	Start to index the PDF documents which recevies from the source. This is progressive, which means that the job may not finished when it return.
 *
 * @param[in] source    The document source object.
 * @param[in] pause     The pause handler, for progressive indexing, could be nil.
 * @param[in] reUpdate  whether re-update the indexed data or not.
 *
 * @return  A progressive object for later resuming the work, return nil if the work is already finished and no more work is required.
 */
-(FSProgressive * _Nullable)startUpdateIndex: (FSDocumentsSource*)source pause: (FSPauseCallback* _Nullable)pause reUpdate:(BOOL)reUpdate;
/**
 * @brief	Update the specified PDF document.
 *
 * @param[in] filePath    The pdf document to be indexed.
 *
 * @return  YES if success.
 */
-(BOOL)updateIndexWithFilePath: (NSString *)filePath;
/**
 * @brief	Search the specifed string from the indexed data source.
 *
 * @param[in] matchString    The string to be search, please refer to http://www.sqlite.org/fts3.html#full_text_index_queries for the format of search string.
 * @param[in] rankMode       Specify the rank mode if you would like to reorder the search results.
 * @param[in] searchCallback The callback which will be invoked when a matched one is found.
 *
 * @return  YES if success.
 */
-(BOOL)searchOf: (NSString *)matchString RankMode:(FSRankMode)rankMode searchCallback: (FSSearchCallback* _Nullable)searchCallback;

/** @brief Free the object. */
-(void)dealloc;

@end

NS_ASSUME_NONNULL_END

