/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/**
 * @file	FSPDFReflow.h
 * @brief	This file contains definitions of object-c APIs for Foxit PDF SDK.
 */
#import "FSCommon.h"

NS_ASSUME_NONNULL_BEGIN
/**
 * @brief	Enumeration for reflow Parser Flags.
 *
 * @details	Values of this enumeration can be used alone or in combination.
 */
typedef NS_OPTIONS(NSUInteger, FSReflowFlags) {
    /** @brief	Reflow parsing flag for normal mode, without image. */
    e_reflowNormal = 0,
    /** @brief	Reflow parsing flag for image mode. */
    e_reflowWithImage = 1 << 0,
    /** @brief	Reflow parsing flag for single screen mode.
     *  The flag can avoid that truncate problem the bottom of screen displaying the upper part of last text or image in single screen mode.
     *	The truncate problem is related to the height by calling {@link FSReflowPage::startParse:} and
     *	if it is not set this flag, the screen could display the upper part of text in the last line or image.
     *	It can improve the effect when reading single screen mode, however, the scroll screen mode would be affected.
     */
    e_reflowNoTruncate = 1 << 1
};

/**
 * @brief		Class to definite for reflow related operation.<br>
 *
 * @details		This module contains following features:<br>
 *				<ul>
 *				<li>1. Reflow PDF page:
 *					<ul>
 *					<li>a. Create or release a page-reflow object, set page size and line space for a page-reflow object, and start reflowing in a progressive process.</li>
 *					<li>b. PDF page-reflow is a common feature to display page contents in a small screen device. It re-lays out page contents.</li>
 *					<li>c. Note: the progressive process of page-reflow should finish before rendering reflowed result or accessing its data.</li>
 *					</ul>
 *				</li>
 *				<li>2. Render reflowed page:
 *					<ul>
 *					<li>a. Get content size of a reflowed page, get transformation matrix for a reflowed page, and render a reflowed page.</li>
 *					<li>b. When a page is reflowed, its coordinates are different. Caller should get a new transformation matrix to display.</li>
 *					</ul>
 *				</li>
 *				<li>3. Data of reflowed page:
 *					<ul>
 *					<li>a. Get focus data for a position, retrieve focus position from focus data, and get text page object.</li>
 *					<li>b. In order to track a position in a reflowed page, Foxit PDF SDK uses a focus data to represent the position.
 *						   Caller can store focus data or save the data to file so that the position can be retrieved later.
 *						   Focus is similar to bookmark or destination in PDF, but it is simpler.<br></li>
 *					</ul>
 *				</li>
 *				</ul>
 *
 * @see	FSRenderContext
 * @see FSRenderer
 * @see FSPDFPage
 */
@interface FSReflowPage : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * @brief	Create a reflow page from a PDF page.
 *
 * @param[in]	pdfPage	A <b>FSPDFPage</b> object which is a PDF page object.
 *
 * @return	 A pointer to a <b>FSReflow</b> pointer to receive the new reflow page handle if successful.<br>
 *			 Application should release this handle if not use it any more by calling function release.
 *            If there is any error, this function will return <b>nil</b>.
 *
 */
- (FSReflowPage *)initWithPDFPage:(FSPDFPage *)pdfPage;

/**
 * @brief	Set screen size before calling function {@link FSReflowPage::startParse:}. This is required.
 *
 * @param[in]	screenWidth			The screen width.
 * @param[in]	screenHeight		The screen height.
 *
 * @return None.
 */
-(void)setScreenSize: (float)screenWidth screenHeight: (float)screenHeight;

/**
 * @brief Set zoom factor before calling function {@link FSReflowPage::startParse:}.
 *
 * @details If no zoom factor has ever been set to current reflow page, Foxit PDF SDK will use value 100 as default zoom factor, which means 100%.
 *			If new zoom factor is set, the new zoom factor will take effect until current reflow page has been re-parsed and rendered again.
 *
 * @param[in] zoom New zoom factor. The value represents the percent value, for example, 100 means 100%. It's must more than 25.
 *
 * @return None.
 */
-(void)setZoom: (int)zoom;

/**
 * @brief	Set the Parsing flag before calling function {@link FSReflowPage::startParse:}.
 *
 * @param[in]	flags		Reflow parsing mode. It should be one of the following enumeration definitions. Default value: {@link FSReflowFlags::e_reflowNormal}.
 *							Please refer to {@link FSReflowFlags::e_reflowNormal FSReflowFlags::e_reflowXXXX} values and this should be one or a combination of these values.
 *
 * @return None.
 */
-(void)setParseFlags: (FSReflowFlags)flags;

/**
 * @brief	Set line space before calling function {@link FSReflowPage::startParse:}.
 *
 * @param[in]	lineSpace			The line space. Default value: 0.
 *
 */
-(void)setLineSpace: (float)lineSpace;

/**
 * @brief	Set the top space of page before calling function {@link FSReflowPage::startParse:}.
 *
 * @details	The function is used to set the distance between the page's top and the screen's top when to reflow a page.
 *
 * @param[in]	topSpace	The top space of page when to reflow and this value should be equal or greater than zero. Default value: 0.
 */
-(void)setTopSpace: (float)topSpace;

/**
 * @brief Start parsing process.This is progressive, which means that the job may not finished when it return.
 *
 * @details It may take a long time to parsing a reflow page,
 *          so Foxit PDF SDK uses a progressive process to do this.
 *          All the resources about reflow page will be loaded after the reflow page is parsed. <br>
 *          This function should be called before any getting function of current reflow page object can be used.
 *
 * @param[in] pause  Pause callback object which decides if the parsing process needs to be paused.
 *                   This can be <b>NULL</b> which means not to pause during the parsing process.
 *                   If this is not <b>NULL</b>, it should be a valid pause object implemented by user.
 *
 * @return A progressive object for later resuming the work, return nil if the work is already finished and no more work is required.
 */
-(FSProgressive * _Nullable)startParse: (FSPauseCallback* _Nullable)pause;

/**
 * @brief	Get width of a reflow page after calling function {@link FSReflowPage::startParse:}.
 *
 * @return	a float that receives the width of reflow page.
 *			If any error occurs, -1 will be returned.
 */
-(float)getContentWidth;

/**
 * @brief	Get height of a reflow page after calling function {@link FSReflowPage::startParse:}.
 *
 * @return	a float that receives the height of reflow page.
 *			If any error occurs, -1 will be returned.
 */
-(float)getContentHeight;

/**
 * @brief	Get the display matrix, according to the offset of top side between current reflow page and screen.
 *
 * @param[in]	offsetX				Offset value, which means the offset from top side of current reflow page to the top side of screen.
 * @param[in]	offsetY				Offset value, which means the offset from left side of current reflow page to the left side of screen.
 *
 * @return	The display matrix.
 *			If there is any error, a ::FSMatrix with all values 0 will be returned.
 */
-(FSMatrix*)getDisplayMatrix: (float)offsetX offsetY: (float)offsetY;

/**
 * @brief	Get focus data corresponding to a given position in device coordinate system.
 *
 * @details	Focus data of a specific content is fixed, and will not change because of different sizes of reflow pages,
 *			which are retrieved from the same PDF page of the same content.
 *			So focus data can be used to locate the same content of a PDF page in reflow pages with different sizes but same reflow content.
 *
 * @param[in]	matrix				Pointer to a ::FSMatrix structure returned by function {@link FSPDFObject::getMatrix}.
 * @param[in]	point				Focuse point of a specific position, in device coordinate system.
 *
 * @return	The focus data.
 *			If there is any error, this function will return empty string.
 */
-(NSString*)getFocusData: (FSMatrix*)matrix point: (FSPointF*)point;

/**
 * @brief	Get a point of a position in device coordinate system corresponding to a given focus data.
 *
 * @details	Focus data of a specific content is fixed, and will not change because of different sizes of reflow pages,
 *			which are retrieved from same PDF page and with same content.
 *			So focus data can be used to locate the same content of a PDF page in reflow pages with different sizes but same reflow content.
 *
 * @param[in]	matrix				Pointer to a FSMatrix structure returned by function {@link FSPDFObject::getMatrix}.
 * @param[in]	focusData			Focus data used to get its corresponding position in device coordinate system, with specific matrix.
 *									This is returned by function {@link FSReflowPage::getFocusData:point:}.
 *
 * @return	A FSPointF point that receives x-coordinate and y-coordinate of a position.
 *			This position is just corresponding to given focus data in device coordinate system.
 */
-(FSPointF*)getFocusPosition: (FSMatrix*)matrix focusData: (NSString*)focusData;

/**
 * @brief	Check if current reflow page has been parsed or not.
 *
 * @return	<b>YES</b> means current reflow page has been parsed, while <b>NO</b> means current page has not been parsed yet.
 */
-(BOOL)isParsed;

/** @brief Free the object. */
-(void)dealloc;

@end

NS_ASSUME_NONNULL_END

