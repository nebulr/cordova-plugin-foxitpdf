/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/**
 * @file	FSPDFForm.h
 * @brief	This file contains definitions of object-c APIs for Foxit PDF SDK.
 */

#import "FSCommon.h"

NS_ASSUME_NONNULL_BEGIN
/************************************************************************************************
 *														 form       							*
 ************************************************************************************************/

/**
 * @brief	Enumeration for form control type.
 *
 * @details	Values of this enumeration should be used alone.
 */
typedef NS_ENUM(NSUInteger, FSFormFieldType) {
    /** @brief	Form field type: unknown. */
    e_formFieldUnknownType = 0,
    /** @brief	Form field type: push button. */
    e_formFieldPushButton,
    /** @brief	Form field type: check box. */
    e_formFieldCheckBox,
    /** @brief	Form field type: radio button. */
    e_formFieldRadioButton,
    /** @brief	Form field type: combo box. */
    e_formFieldComboBox,
    /** @brief	Form field type: list box. */
    e_formFieldListBox,
    /** @brief	Form field type: text field. */
    e_formFieldTextField,
    /** @brief	Form field type: signature field. */
    e_formFieldSignature
};

/**
 * @brief	Enumeration for form field flags.
 *
 * @details	Values of this enumeration can be used alone or in a combination.
 */
typedef NS_OPTIONS(NSUInteger, FSFormFieldFlags) {
    /** @brief	The field is read only and no editing is allowed. */
    e_formFieldFlagReadonly		= 0x01,
    /** @brief	The field must have a value at the time it is exported by a submit-form action. */
    e_formFieldFlagRequired		= 0x02,
    /** @brief	The field must not be exported by a submit-form action. */
    e_formFieldFlagNoExport		= 0x04,
    /**
     * @brief	(Only useful for radio button)Unable to turn the radio button off.
     *
     * @details	For radio button only: if set, one radio button must be selected at any time;
     *			otherwise, when the selected radio button is clicked, it will be turned off,
     *			(leaving no radio button selected at this time).
     */
    e_formFieldFlagButtonNoToggleToOff	= 0x100,
    /**
     * @brief	(Only useful for radio button) Put radio buttons with same value in unison
     *
     * @details	If set, radio buttons with same value in a field will be turned on or off
     *			in unison (either all on, or all off). If cleared, all buttons are
     *			mutually exclusive.
     */
    e_formFieldFlagButtonRadiosInUnison	= 0x200,
    /** @brief	(Only useful for text field)If set, the text field can contain multiple lines of text. */
    e_formFieldFlagTextMultiline	= 0x100,
    /**
     * @brief	(Only useful for text field)If set, the text field is used as a password field.
     *
     * @details	If a text field is used as a password field, the typed password string should not be displayed or exported.
     */
    e_formFieldFlagTextPassword	= 0x200,
    /**
     * @brief	(Only useful for text field)Never show scroll bar for a text field.
     *
     * @details	If set, do not scroll (vertically for multiple-line fields, or horizontally for single-line fields)
     *			to accommodate more text than fits within the field's rectangle.
     *			If the field is full, no further text is accepted.
     */
    e_formFieldFlagTextDoNotScroll	= 0x400,
    /**
     * @brief	(Only useful for text field)Use combs.
     *
     * @details	If set, the field is automatically divided into as many equally spaced positions,
     *			or combs, as the value of maximum length of a field's text, and the text is laid out into those combs.
     */
    e_formFieldFlagTextCombo	= 0x800,
    /**
     * @brief	(Only useful for combo box)If set, the combo box includes an editable text control with a drop list, otherwise, it includes only a drop list.
     */
    e_formFieldFlagComboEdit	= 0x100,
    /** @brief	(Only useful for combo box and list box)If set, more than one items can be selected; otherwise, only one item can be selected in one time. */
    e_formFieldFlagChoiseMultiselect	= 0x100
};

/**
 * @brief	Class to access interactive form.
 *
 * @details	An interactive form -- sometimes referred to as an AcroForm -- is a collection of fields for gathering information interactively from the user.
 *			A PDF document may contain any number of fields appearing on any combination of pages, all of which make up a single, global interactive form spanning the entire document.
 *			Arbitrary subsets of these fields can be imported or exported from the document.<br>
 *			Function {@link FSPDFDoc::hasForm} can be used to judge if a PDF document has interactive form, and function {@link FSPDFDoc::getForm} can be used to get the interactive form object.
 *			This class also offers functions to access form fields, import/export form data and other features. For example:
 *			<ul>
 *			<li>To access form fields, use functions {@link FSForm::getFieldCount:} and {@link FSForm::getField:index:}.</li>
 *			<li>To import form data from an XML file, use function {@link FSForm::importFromXML:};
 *				to export form data to an XML file, use function {@link FSForm::exportToXML:}.</li>
 *			<li>To access form filler, use function {@link FSForm::getFormFiller}.</li>
 *			</ul>
 *
 * @see	FSPDFDoc
 */
@interface FSForm : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * @brief	Get count of form fields, whose names satisfy the specified filter name.
 *
 * @param[in]	filter		A UTF-8 encoded string as the filter. <br>
 *							If this is <b>nil</b> or an empty string, that means to count all fields.<br>
 *							If this is valid, that means to count those fields whose name is partially matched by parameter <i>filter</i>.
 *							For example, if parameter <i>filter</i> is "text1", the filter will match text1.0, text1.2.0, etc; but not match test10 or test11.1.
 *
 * @return	The count of the form fields.
 */
-(int)getFieldCount: (NSString *)filter;

/**
 * @brief	Get a form field by index, whose names satisfy the specified filter name.
 *
 * @param[in]	filter		A UTF-8 encoded string as the filter. <br>
 *							If this is <b>nil</b> or an empty string, that means to count all fields.<br>
 *							If this is valid, that means to count those fields whose name is partially matched by parameter <i>filter</i>.
 *							For example, if parameter <i>filter</i> is "text1", the filter will match text1.0, text1.2.0, etc; but not match test10 or test11.1.
 * @param[in]	index		Form field index. Valid range: from 0 to (<i>count</i>-1).
 *							<i>count</i> is returned by function {@link FSForm::getFieldCount:} with same parameter <i>filter</i>.
 *
 * @return	A form field object.
 *			If no form field can be found or there is any error, this function will return <b>nil</b>.
 */
-(FSFormField*)getField: (NSString *)filter index: (int)index;

/**
 * @brief	Get the form filler.
 *
 * @return	The form filler object.
 *			If the form filler has not been created yet, this function will return <b>nil</b>.
 */
-(FSFormFiller*)getFormFiller;

/**
 * @brief	Reset data in all fields to their default value.
 *
 * @return	<b>YES</b> means reseting operation is successful, while <b>NO</b> means failure.
 */
-(BOOL)reset;

/**
 * @brief	Export the form data to an XML file.
 *
 * @param[in]	path	XML file path, which specifies the XML file that form data will be exported to.
 *						It should be an XML file, otherwise this function will fail.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)exportToXML: (NSString *)path;

/**
 * @brief	Import the form data from an XML file.
 *
 * @param[in]	path	XML file path, which specifies the XML file that form data will be imported from.
 *						It should be an XML file, otherwise this function will fail.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)importFromXML: (NSString *)path;

/**
 * @brief	Export the form data to a FDF/XFDF document.
 *
 * @param[in]	fdfDoc	A ::FSFDFDoc object which the form exports to.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)exportToFDFDoc: (FSFDFDoc*)fdfDoc;

/**
 * @brief	Import the form data from a FDF/XFDF document.
 *
 * @param[in]	fdfDoc	A ::FSFDFDoc object which the form imports from.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)importFromFDFDoc: (FSFDFDoc*)fdfDoc;

/** @brief Free the object. */
-(void)dealloc;

@end


/** @brief Class representing the data of an option in list box or combo box. */
@interface FSChoiceOption : NSObject {
    void *swigCPtr;
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
-(id)init;
-(id)initWithOption: (FSChoiceOption*)option;
-(void)set: (NSString *)optionValue optionLabel: (NSString *)optionLabel selected: (BOOL)selected defaultSelected: (BOOL)defaultSelected;
/** @brief The option string value, in UTF-8 encoding. */
@property (nonatomic, copy) NSString *optionValue;
/** @brief The displayed string value for the option, in UTF-8 encoding. */
@property (nonatomic, copy) NSString *optionLabel;
/** @brief Whether the option is selected. */
@property (nonatomic, assign) BOOL selected;
/** @brief Whether the option is selected by default. */
@property (nonatomic, assign) BOOL defaultSelected;

-(void)dealloc;

@end

/**
 * In a PDF document, form fields appear on any combination of pages and all of them make up a single,
 * global interactive form spanning the entire document. Function {@link FSForm::GetField} can use to
 * get a form field from interactive form. This class offers functions to get some information/properties of
 * a form field, reset the form field to its default value, and get form control from form field.<br>
 * When a form fiels's type is {@link FSFormFieldType::e_formFieldSignature FSFormFieldType::e_formFieldSignature},
 * the form field object is a FSSignature object in fact.
 *
 * @see FSForm
 * @see FSSignature
 */
@interface FSFormField : NSObject {
    void *swigCPtr;
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief Get field type.
 *
 * @return Form field type. Please refer to {@link FSFormFieldType::e_formFieldUnknownType FSFormFieldType::e_formFieldXXX}
 *         values and it would be one of these values.
 */
-(FSFormFieldType)getType;
/**
 * @brief Get field flags.
 *
 * @details Field flags specifies various characteristics of a form field.
 *
 * @return Form field flags. Please refer to
 *         {@link FSFormFieldFlags::e_formFieldFlagReadonly FSFormFieldFlags::e_formFieldFlagXXX} values and it would be
 *         one of a combination of these values.
 */
-(FSFormFieldFlags)getFlags;
/**
 * @brief Set field flags.
 *
 * @details Field flags specifies various characteristics of a form field.
 *
 * @param[in] flags  New form field flags. Please refer to
 *                   {@link FSFormFieldFlags::e_formFieldFlagReadonly FSFormFieldFlags::e_formFieldFlagXXX}
 *                   values and it would be one of a combination of these values.
 *
 * @return None.
 */
-(void)setFlags: (FSFormFieldFlags)flags;
/**
 * @brief Get field name.
 *
 * @return Field name string, in UTF-8 encoding.
 */
-(NSString*)getName;
/**
 * @brief Get default value.
 *
 * @details Applicable for all fields except push button.
 *          For field types that are not applicable, an empty string will be returned.
 *
 * @return Default value string, in UTF-8 encoding.
 *         If there is any error, this function will return an empty string.
 */
-(NSString*)getDefaultValue;
/**
 * @brief Set default value.
 *
 * @details Applicable for all fields except push button.
 *          For field types that are not applicable, this function will do nothing.
 *
 * @param[in] value  New default value string, in UTF-8 encoding. It should not be <b>NULL</b> or empty.
 *
 * @return None.
 */
-(void)setDefualtValue: (NSString *)value;
/**
 * @brief Get value.
 *
 * @details Applicable for all fields except push button.
 *          For field types that are not applicable, an empty string will be returned.
 *
 * @return Value string, in UTF-8 encoding.
 */
-(NSString*)getValue;
/**
 * @brief Set value.
 *
 * @details Applicable for all fields except push button.
 *          For field types that are not applicable, this function will do nothing.
 *
 * @param[in] value  New value string, in UTF-8 encoding. It should not be <b>NULL</b> or empty.
 *
 * @return None.
 */
-(void)setValue: (NSString *)value;
/**
 * @brief Get the alignment value
 *
 * @details Alignment is a property for variable text. And it is only useful for text field and list box,
 *          which may contain variable text as their content.<br>
 *          If a specific text field or list box has its own alignment value,
 *          the document-wide default alignment value will be ignored; otherwise, the document-wide
 *          default alignment value will be used for the specific text field or list box.
 *
 * @return The alignment value. Please refer to {@link FSAlignment::e_alignmentLeft FSAlignment::e_alignmentXXX} values
 *         and it would be one of these values.
 */
-(FSAlignment)getAlignment;
/**
 * @brief Set alignment property of a form, as a document-wide default value. (Not support signature field)
 *
 * @details Alignment is a property for variable text. And it is only useful for text field and list box,
 *          which may contain variable text as their content.<br>
 *          If a specific text field or list box has its own alignment value,
 *          the document-wide default alignment value will be ignored; otherwise, the document-wide
 *          default alignment value will be used for the specific text field or list box.<br>
 *          If current form field is a signature field, this function will do nothing.
 *
 * @param[in] alignment  The new default alignment type of variable text. Please refer to
 *                       {@link FSAlignment::e_alignmentLeft FSAlignment::e_alignmentXXX} values and it should be
 *                       one of these values. <br>
 *                       If other values is used to set, {@link FSAlignment::e_alignmentLeft  FSAlignment::e_alignmentLeft}
 *                       will be used by default.
 *
 * @return None.
 */
-(void)setAlignment: (FSAlignment)alignment;
/**
 * @brief Get alternate name.
 *
 * @details An alternate field name to be used in place of the actual field name wherever the field must be
 *          identified in the user interface (such as in error or status messages referring to the field).
 *          This text is also useful when extracting the document's contents in support of accessibility to
 *          users with disabilities or for other purposes.<br>
 *          If current form field is a signature field, this function will do nothing.
 *
 * @return The alternate name, in UTF-8 encoding.
 */
-(NSString*)getAlternateName;
/**
 * @brief Set alternate name. (Not support signature field)
 *
 * @details An alternate field name to be used in place of the actual field name wherever the field must be
 *          identified in the user interface (such as in error or status messages referring to the field).
 *          This text is also useful when extracting the document's contents in support of accessibility to
 *          users with disabilities or for other purposes.<br>
 *          If current form field is a signature field, this function will do nothing.
 *
 * @param[in] alternate_name  A new alternate name string, in UTF-8 encoding. It should not be <b>NULL</b> or empty.
 */
-(void)setAlternateName: (NSString *)alternate_name;
/**
 * @brief Get the default appearance data.
 *
 * @return The default appearance data.
 */
-(FSDefaultAppearance*)getDefaultAppearance;
/**
 * @brief Set default appearance data.
 *
 * @param[in] default_ap  The new default appearance.{@link FSDefaultAppearance::flags} can be used to decide
 *                        which information is/are to be updated with the new data; for those no updated data,
 *                        they will keep to use old data.
 *
 * @return None.
 */
-(void)setDefaultAppearance: (FSDefaultAppearance*)appearance;
/**
 * @brief Get mapping name
 *
 * @details Mapping name is to be used when exporting interactive form field data from the document.
 *
 * @return The mapping name, in UTF-8 encoding.
 */
-(NSString*)getMappingName;
/**
 * @brief Get maximum length of the field's text, in characters.
 *
 * @details Applicable for text fields. For field types that are not applicable, this function will return 0.
 *
 * @return The maximum length of the field's text.
 */
-(void)setMappingName: (NSString *)name;
/**
 * @brief Set maximum length of the field's text, in characters.
 *
 * @details Applicable for text fields. For field types that are not applicable, this function will do nothing.
 *          If current form field is a signature field, this function will do nothing.
 *
 * @param[in] max_length  New maximum length of the field's text. It should be non-negative.
 */
-(int)getMaxLength;
/**
 * @brief Set maximum length of the field's text, in characters.
 *
 * @details Applicable for text fields. For field types that are not applicable, this function will do nothing.
 *          If current form field is a signature field, this function will do nothing.
 *
 * @param[in] max_length  New maximum length of the field's text. It should be non-negative.
 */
-(void)setMaxLength: (int)max_length;
/**
 * @brief Get options of list box or combo box.
 *
 * @details Applicable for list box and combo box. For field types that are not applicable,
 *          this function will return an empty array.
 *
 * @return An array that contains the options.
 */
-(NSArray<FSChoiceOption *> *)getOptions;
/**
 * @brief Set options of list box or combo box.
 *
 * @details Applicable for list box and combo box. For field types that are not applicable,
 *          this function will do nothing.
 *
 * @param[in] option_array  An array of options which is to be set to list box or combo box.
 *
 * @return None.
 */
-(void)setOptions: (NSArray<FSChoiceOption *> *)option_array;
/**
 * @brief Get top index of option for scrollable list boxes.
 *
 * @details Applicable for list box. For field types that are not applicable,
 *          this function will return 0.<br>
 *          Top index of option is the the index of the first option visible in the list.
 *
 * @return The index of first item which is in visible scope of list box.
 */
-(int)getTopVisibleIndex;
/**
 * @brief Set top index for scrollable list boxes.
 *
 * @details Applicable for list box. For field types that are not applicable,
 *          this function will do nothing.<br>
 *          Top index of option is the the index of the first option visible in the list.
 *
 * @param[in] index  The index of the first option visible in the list.
 *
 * @return None.
 */
-(void)setTopVisibleIndex: (int)index;
/**
 * @brief Get count of form controls.
 *
 * @return The count of the form controls.
 */
-(int)getControlCount;
/**
 * @brief Get a form control by index.
 *
 * @param[in] index  Form control index. Valid range: from 0 to (<i>count</i>-1).
 *                   <i>count</i> is returned by function {@link FSFormField::GetControlCount} with
 *                   same parameter <i>page</i>.
 *
 * @return A form control object.
 */
-(FSFormControl*)getControl: (int)index;
/**
 * @brief Reset data in current field to its default value. (Not support signature field)
 *
 * @return <b>true</b> means success, while <b>false</b> means failure.
 */
-(BOOL)reset;

-(void)dealloc;

@end

/**
 * Foxit PDF SDK defines "form control" to associate form field with its related widget annotations.
 * A form field may have one or more form controls, and each form control is associated with a widget annotation.
 * A form control object can be retrieved by following functions:
 * <ul>
 * <li>from a form, please use function {@link FSForm::GetControl}.</li>
 * <li>from a form field, please use functions {@link FSFormField::GetControl}.</li>
 * </ul>
 * Form control also offers functions to get related form field object and widget annotation object. <br>
 * Function {@link FSForm::AddControl} can be used to add a new form control to a form field, and function
 * {@link FSForm::RemoveControl} can be used to remove a form control.
 *
 * @see FSFormControl
 * @see FSFormField
 */
@interface FSFormControl : NSObject {
    void *swigCPtr;
    BOOL swigCMemOwn;
}

/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief Get the related form field.
 *
 * @return The related form field object.
 */
-(FSFormField*)getField;
/**
 * @brief Get the related widget annotation.
 *
 * @return The related widget annotation.
 */
-(FSWidget*)getWidget;
/**
 * @brief Get the index of current form control among all the controls of related form field.
 *
 * @return The index of the form control.
 */
-(int)getIndex;
/**
 * @brief Get export mapping name.
 *
 * @details Applicable for check box and radio button as related form field.
 *          If related form field is other field type, this function will return an empty string.
 *
 * @return The export mapping name, in UTF-8 encoding.
 */
-(NSString*)getExportValue;
/**
 * @brief Set export mapping name.
 *
 * @details Applicable for check box and radio button as related form field.
 *          If related form field is other field type, this function will do nothing.
 *
 * @param[in] value  The new export mapping name, in UTF-8 encoding. It should not be <b>NULL</b> and empty.
 */
-(void)setExportValue: (NSString *)value;
/**
 * @brief Check if the current form control is checked when related form field is check box or radio button.
 *
 * @details Applicable for check box and radio button as related form field.
 *          If related form field is other field type, this function will return <b>false</b>.
 *
 * @return <b>true</b> means checked, and <b>false</b> means not checked.
 */
-(BOOL)isChecked;
/**
 * @brief Set the check state of current form control when related form field is check box or radio button.
 *
 * @details Applicable for check box and radio button as related form field.
 *          If related form field is other field type, this function will do nothing.
 *
 * @param[in] checked  <b>true</b> means checked, and <b>false</b> means not checked.
 *
 * @return None.
 */
-(void)setChecked: (BOOL)checked;
/**
 * @brief Check if the current form control is checked by default when related form field is check box or
 *        radio button.
 *
 * @details Applicable for check box and radio button as related form field.
 *          If related form field is other field type, this function will return <b>false</b>.
 *
 * @return <b>true</b> means checked by default, and <b>false</b> means not checked by default.
 */
-(BOOL)isDefaultChecked;
/**
 * @brief Set the default check state of current form control when related form field is check box or radio button.
 *
 * @details Applicable for check box and radio button as related form field.
 *          If related form field is other field type, this function will do nothing.
 *
 * @param[in] checked  <b>true</b> means checked by default, and <b>false</b> means not checked by default.
 */
-(void)setDefaultChecked: (BOOL)checked;

-(void)dealloc;

@end

/**
 * @brief	A callback function used as a timer on every time interval.
 *
 * @param[in]	timer	Identifier of a timer.
 */
@interface FSTimer : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief	A callback function used as a timer on every time interval.
 *
 * @param[in]	timer	Identifier of a timer.
 *
 * @return	None.
 */
-(void)onTimer:(int)timer;

/** @brief Free the object. */
-(void)dealloc;

@end

/**
 * @brief	Class to represents a callback object to assist form filler.
 *
 * @details	All the pure virtual functions in this class are used as callback functions and should be implemented by user.<br>
 * 			This is an assistant class for form filler.
 */
@interface FSFormFillerAssist : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/** @brief Get the version of derived implementation, for compatibility reason. */
-(int)getVersion;

/**
 * @brief	A callback function used to refresh the specified area on a specified page.
 *
 * @param[in]	page		A PDF page object.
 * @param[in]	pdfRect		A rectangle that specifies the area on the page to be redrawn.
 */
-(void)refresh: (FSPDFPage*)page pdfRect: (FSRectF*)pdfRect;

/**
 * @brief	A callback function used to set a system timer.
 *
 * @details	This callback function is called to install a system timer.
 *			When a time-out value is specified, and every time when a time-out occurs,
 *			the system passes a message to the timer callback function.
 *
 * @param[in]	elapse		Specifies the time-out value, in milliseconds.
 * @param[in]	timer	Function pointer of a callback function as timer.
 * @param[out]	timerID		The timer identifier of the new timer if the function is finished successfully.
 *							An application passes this value to the FSFormFillerAssist::killTimer method to kill
 *							the timer. Nonzero if it is successful; otherwise, it is zero.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)setTimer: (int)elapse timer: (FSTimer*)timer timerID: (int *)timerID;

/**
 * @brief	A callback function used to kill the timer event by timer identifier.
 *
 * @param[in]	timerID		The timer ID, returned by an earlier calling of callback function {@link FSFormFillerAssist::setTimer:timer:timerID:}.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)killTimer: (int)timerID;

/**
 * @brief	A callback function which is triggered when the focus is set to a form control.
 *
 * @details	Currently, only support text field and combobox field.
 *
 * @param[in]	control		The form control object, to which the focus is set.
 * @param[in]	fieldValue	The value of form field associated with the control. It should be in UTF-8 encoding.
 */
-(void)focusGotOnControl: (FSFormControl*)control fieldValue: (NSString *)fieldValue;

/**
 * @brief	A callback function which is triggered when the focus is lost from a form control.
 *
 * @details	Currently, only support text field and combobox field.
 *
 * @param[in]	control		The form control object, to which the focus is lost.
 * @param[in]	fieldValue	The value of form field associated with the control. It should be in UTF-8 encoding.
 */
-(void)focusLostFromControl: (FSFormControl*)control fieldValue: (NSString *)fieldValue;

/** @brief Free the object. */
-(void)dealloc;

@end

/**
 * @brief	Class to represent a form filler, used for filling PDF form.
 *
 * @details	This class is used for filling PDF form. There should be only one form filler object for an interactive form,
 *			so do not call function {@link FSFormFiller::create:assist:} for one form more than one time.
 *
 * @note	User is recommended to implement a ::FSActionHandler and set it to Foxit PDF SDK by function {@link FSLibrary::setActionHandler:},
 *			in order to implement more features of form filler.
 */
@interface FSFormFiller : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * @brief	Create a form filler object. It should not be called one more time if the form is the same.
 *
 * @details	There can be only one form filler for a form.
 *
 * @param[in]	form		A PDF form.
 * @param[in]	assist		An assistant class for form filler. This should be implemented by user.
 *
 * @return	A form filler object.
 *			If there is any error, this function will return <b>nil</b>.
 */
- (FSFormFiller *)initWithForm:(FSForm *)form assist:(FSFormFillerAssist *)assist;

/**
 * @brief	Draw the currently focused form control on the page.
 *
 * @details	If there is no focused form control on the page, nothing will be drawn.
 *			The focused form control has to be the topmost visible element, so that it should be always rendered after page content and annotations have been rendered.
 *
 * @param[in]	page		A PDF page object.
 * @param[in]	matrix		The transformation matrix used for rendering, which is usually returned by function {@link FSPDFPage::getDisplayMatrix:yPos:xSize:ySize:rotate:}.
 * @param[in]	renderer	The renderer used for rendering.
 */
-(void)render: (FSPDFPage*)page matrix:(FSMatrix*)matrix renderer:(FSRenderer*)renderer;

/**
 * @brief	Triggered when tapping the specified page.
 *
 * @param[in] page		The PDF page object.
 * @param[in] point		The PDF point in PDF coordinate system.
 *
 * @return	 <b>YES</b> if successful, <b>NO</b> if failed.<br>
 */
-(BOOL)tap: (FSPDFPage*)page point: (FSPointF*)point;

/**
 * @brief	Triggered when panning on the specified page.
 *
 * @param[in] page		The PDF page object.
 * @param[in] point		The PDF point in PDF coordinate system.
 *
 * @return	 <b>YES</b> if successful, <b>NO</b> if failed.<br>
 */
-(BOOL)touchesBegan: (FSPDFPage*)page point: (FSPointF*)point;

/**
 * @brief	Triggered when panning on the specified page.
 *
 * @param[in] page		The PDF page object.
 * @param[in] point		The PDF point in PDF coordinate system.
 *
 * @return	 <b>YES</b> if successful, <b>NO</b> if failed.<br>
 */
-(BOOL)touchesMoved: (FSPDFPage*)page point: (FSPointF*)point;

/**
 * @brief	Triggered when panning on the specified page.
 *
 * @param[in] page		The PDF page object.
 * @param[in] point		The PDF point in PDF coordinate system.
 *
 * @return	 <b>YES</b> if successful, <b>NO</b> if failed.<br>
 */
-(BOOL)touchesEnded: (FSPDFPage*)page point: (FSPointF*)point;

/**
 * @brief	Call this function when a character code is about to be inputted to a form field.
 *
 * @param[in] charCode	The character code, UTF-8 encoding.
 *
 * @return	 <b>YES</b> if successful, <b>NO</b> if failed.<br>
 */
-(BOOL)input: (unsigned int)charCode;

/**
 * @brief	Set focus on a form control. No focus if parameter <i>control</i> is <b>nil</b>
 *
 * @param[in]	control		The form control object.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)setFocus: (FSFormControl * _Nullable)control;

/**
 * @brief	Decide whether to highlight form fields or not.
 *
 * @details	All the form field types can be highlighted, except push button fields.
 *
 * @param[in]	isHighlight		A boolean value that indicates whether to highlight form fields or not:<br>
 *								<b>YES</b> means to highlight form fields, and <b>NO</b> means not to highlight form fields.
 */
-(void)highlightFormFields: (BOOL)isHighlight;

/**
 * @brief	Set the highlight color used for highlighting form fields.
 *
 * @param[in]	color	The highlight color. Format: 0xAARRGGBB.
 */
-(void)setHighlightColor: (unsigned int)color;

/** @brief Free the object. */
-(void)dealloc;

@end

NS_ASSUME_NONNULL_END
