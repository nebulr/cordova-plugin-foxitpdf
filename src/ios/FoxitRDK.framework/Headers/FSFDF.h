/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/**
 * @file	FSFDF.h
 * @brief	This file contains definitions of object-c APIs for Foxit PDF SDK.
 */

#import "FSCommon.h"

NS_ASSUME_NONNULL_BEGIN

/*******************************************************************************/
/* FDF document                                                                */
/*******************************************************************************/

/**
 * @brief	Enumeration for FDF document type.
 *
 * @details	Values of this enumeration should be used alone.
 */
typedef NS_ENUM(NSUInteger, FSFDFDocType) {
    /** @brief	FDF document type: FDF. */
    e_fdfDocTypeFDF = 0,
    /** @brief	FDF document type: XFDF. */
    e_fdfDocTypeXFDF = 1
};

/**
 * @brief	Class to access a FDF/XFDF document.
 *
 * @details	FDF (Forms Data Format) is a kind of file format, used for interactive form data.
 *			FDF can be used when submitting form data to a server, receiving the response, and incorporating it into the interactive form.
 *			It can also be used to export form data to stand-alone files that can be stored, transmitted electronically,
 *			and imported back into the corresponding PDF interactive form. Besides these, FDF can be used to define a container for annotations
 *			that are separate from the PDF document to which they apply.<br>
 *			XFDF(XML Forms Data Format) is a version of FDF based on XML. It has similar features with FDF.<br>
 *			In short terms, FDF and XFDF contain the subset of a PDF document to describe interactive forms and annotations.<br>
 *			Class {@link ::FSFDFDoc} can be used to represent either FDF or XFDF. A {@link ::FSFDFDoc} object can be created in following ways:
 *			<ul>
 *			<li>To create a new FDF/XFDF document, please call function {@link FSFDFDoc::create:}.</li>
 *			<li>To load an existing FDF/XFDF document, please call functions {@link FSFDFDoc::loadFromFilePath:}, {@link FSFDFDoc::loadFromMemory:},
 *			or {@link FSFDFDoc::loadFromHandler:}.</li>
 *			</ul>
 *			This class also offer functions to:
 *			<ul>
 *			<li>import single annotation or all annotations from a PDF document, or export annotations to a PDF document,
 *				by functions {@link FSFDFDoc::importAnnotFromPDFDoc:}, {@link FSFDFDoc::importAllAnnotsFromPDFDoc:}, {@link FSFDFDoc::exportAllAnnotsToPDFDoc:}.</li>
 *			<li>get or set related PDF fiel path, by functions {@link FSFDFDoc::getPDFPath} and {@link FSFDFDoc::setPDFPath:}.</li>
 *			<li>save current FDF/XFDF as another one, by function {@link FSFDFDoc::saveAs:}.</li>
 *			</ul>
 *			To import or export form fields, please use functions {@link FSForm::importFromFDFDoc:} and {@link FSForm::exportToFDFDoc:}.
 *
 * @see	FSAnnot
 * @see	FSForm
 */
@interface FSFDFDoc : NSObject
{
    void *swigCPtr;
    BOOL swigCMemOwn;
}
-(void*)getCptr;

-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;

/**
 * @brief	Create an empty new FDF/XFDF document.
 *
 * @param[in]	fdfDocType	The FDF document type. It should be one of following values: <br>
 *							{@link FSFDFDocType::e_fdfDocTypeFDF}, {@link FSFDFDocType::e_fdfDocTypeXFDF}
 *
 * @return	A new ::FSFDFDoc object.
 *
 * @exception	e_errParam		Value of input parameter is invalid.
 * @exception	e_errOutOfMemory	Out-of-memory error occurs.
 */
-(id)initWithFDFDocType: (FSFDFDocType)fdfDocType;

/**
 * @brief	Load a FDF/XFDF document object from an existing FDF/XFDF file path.
 *
 * @param[in]	path	A full path of an existing FDF/XFDF file, including file name and extension. It should be in UTF-8 encoding.
 *						It should be a FDF or XFDF file.
 *
 * @return	A new ::FSFDFDoc object.
 *
 * @exception	e_errParam			Value of input parameter is invalid.
 * @exception	e_errFormat			Any input UTF-8 string parameter is not in UTF-8 encoding, or input path is no a FDF or XFDF file.
 * @exception	e_errFile			The file specified by input path cannot be found or opened.
 * @exception	e_errOutOfMemory	Out-of-memory error occurs.
 */
-(id)initWithFilePath: (NSString *)path;

/**
 * @brief	Load a FDF/XFDF document object from a memory buffer, which contains full data of a FDF/XFDF document.
 *
 * @param[in]	buffer			A memory buffer. The FDF/XFDF document data should be fully loaded in this memory buffer.
 *
 * @return	A new ::FSFDFDoc object.
 *
 * @exception	e_errParam			Value of input parameter is invalid.
 * @exception	e_errFormat			Data in input memory does not represent a FDF or XFDF file.
 * @exception	e_errOutOfMemory	Out-of-memory error occurs.
 */
-(id)initWithMemory: (NSData *)buffer;

/**
 * @brief	Load a FDF/XFDF document object with a file read handler.
 *
 * @param[in]	fileRead	Pointer to a ::FSFileReadCallback object which is implemented by user to load a FDF/XFDF document.
 *							It should not be <b>nil</b>.
 *
 * @return	A new ::FSFDFDoc object.
 *
 * @exception	e_errParam			Value of input parameter is invalid.
 * @exception	e_errFormat			Input ::FSFileReadCallback does not access to a FDF or XFDF file.
 * @exception	e_errOutOfMemory	Out-of-memory error occurs.
 */
-(id)initWithHandler: (id<FSFileReadCallback>)fileRead;

/**
 * @brief	Get the path of related PDF document
 *
 * @details	The path can be either an absolute one, or a relative one.
 *
 * @return	Path of related PDF, in UTF-8 encoding.
 *
 * @exception	e_errUnknown	Any unknown error occurs.
 */
-(NSString *)getPDFPath;

/**
 * @brief	Set the path of related PDF document.
 *
 * @details	The path can be either an absolute one, or a relative one.<br>
 *
 * @param[in]	pdfPath		The path of related PDF document. It should be in UTF-8 encoding.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 *
 * @exception	e_errParam			Value of input parameter is invalid.
 * @exception	e_errFormat			Any input UTF-8 string parameter is not in UTF-8 encoding, or input path is not a PDF file.
 * @exception	e_errOutOfMemory	Out-of-memory error occurs.
 * @exception	e_errUnknown		Any unknown error occurs.
 */
-(BOOL)setPDFPath: (NSString *)pdfPath;

/**
 * @brief	Save current FDF/XFDF document as another FDF/XFDF file.
 *
 * @param[in]	filePath	A full path of the new saved FDF/XFDF file, including file name and extension. It should be in UTF-8 encoding.
 *							The file extension should match the type of current {@link ::FSFDFDoc} object.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 *
 * @exception	e_errParam			Value of input parameter is invalid.
 * @exception	e_errFormat			Any input UTF-8 string parameter is not in UTF-8 encoding, or input path is not a FDF or XFDF file.
 * @exception	e_errUnknown		Any unknown error occurs.
 */
-(BOOL)saveAs: (NSString *)filePath;

/**
 * @brief	Import an annotation from a PDF document into current FDF/XFDF document.
 *
 * @details	Only markup annotations can be imported to a FDF/XFDF document.
 *			Specially, markup annotations' related pop-up annotations will be imported as well, since they are just as a part of markup annotations.
 *
 * @param[in]	annot	 A ::FSAnnot object which is to be imported. It should be a markup annotation.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 *
 * @exception	e_errParam			Value of input parameter is invalid.
 * @exception	e_errOutOfMemory	Out-of-memory error occurs.
 * @exception	e_errUnknown		Any unknown error occurs.
 */
-(BOOL)importAnnotFromPDFDoc: (FSAnnot*)annot;

/**
 * @brief	Import all annotations from a PDF document into current FDF/XFDF document.
 *
 * @details	Only markup annotations can be imported to a FDF/XFDF document.
 *			Specially, markup annotations' related pop-up annotations will be imported as well, since they are just as a part of markup annotations.
 *
 * @param[in]	pdfDoc	A ::FSPDFDoc object, whose annotations will all be imported to curernt FDF/XFDF document.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 *
 * @exception	e_errParam			Value of input parameter is invalid.
 * @exception	e_errOutOfMemory	Out-of-memory error occurs.
 * @exception	e_errUnknown		Any unknown error occurs.
 */
-(BOOL)importAllAnnotsFromPDFDoc: (FSPDFDoc*)pdfDoc;

/**
 * @brief	Export all annotations from current FDF/XFDF document into a PDF document.
 *
 * @param[in]	pdfDoc	A ::FSPDFDoc object, to which all annotations in current FDF/XFDF document will be exported.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 *
 * @exception	e_errParam			Value of input parameter is invalid.
 * @exception	e_errOutOfMemory	Out-of-memory error occurs.
 * @exception	e_errUnknown		Any unknown error occurs.
 */
-(BOOL)exportAllAnnotsToPDFDoc: (FSPDFDoc*)pdfDoc;

/** @brief Free the object. */
-(void)dealloc;

@end

NS_ASSUME_NONNULL_END
