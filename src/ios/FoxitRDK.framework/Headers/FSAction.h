/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.6
 *
 * This file is not intended to be easily readable and contains a number of
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG
 * interface file instead.
 * ----------------------------------------------------------------------------- */

/**
 * @file	FSAction.h
 * @brief	This file contains definitions of object-c APIs for Foxit PDF SDK.
 */

#import "FSCommon.h"

NS_ASSUME_NONNULL_BEGIN

/**
 * @brief	Enumeration for action type.
 *
 * @details	Values of this enumeration should be used alone.
 */
typedef NS_ENUM(NSUInteger, FSActionType) {
    /** @brief	Action type: unknown action. */
    e_actionTypeUnknown = 0,
    /** @brief	Action type: go-to action. */
    e_actionTypeGoto,
    /** @brief	Action type: remote go-to action. */
    e_actionTypeGoToR,
    /** @brief	Action type: embedded go-to action. */
    e_actionTypeGoToE,
    /** @brief	Action type: launch action. */
    e_actionTypeLaunch,
    /** @brief	Action type: thread action. */
    e_actionTypeThread,
    /** @brief	Action type: uniform resource identifier (URI) action. */
    e_actionTypeURI,
    /** @brief	Action type: sound action. */
    e_actionTypeSound,
    /** @brief	Action type: movie action. */
    e_actionTypeMovie,
    /** @brief	Action type: hide action. */
    e_actionTypeHide,
    /** @brief	Action type: named action. */
    e_actionTypeNamed,
    /** @brief	Action type: submit-form action. */
    e_actionTypeSubmitForm,
    /** @brief	Action type: reset-form action. */
    e_actionTypeResetForm,
    /** @brief	Action type: import-data action. */
    e_actionTypeImportData,
    /** @brief	Action type: JavaScript action. */
    e_actionTypeJavaScript,
    /** @brief	Action type: set-OCG-state action. */
    e_actionTypeSetOCGState,
    /** @brief	Action type: rendition action. */
    e_actionTypeRendition,
    /** @brief	Action type: transition action. */
    e_actionTypeTrans,
    /** @brief	Action type: go-to-3D-view action. */
    e_actionTypeGoTo3DView
};

/**
 * @brief Enumeration for new window flag.
 *
 * @details Values of this enumeration should be used alone.
 */
typedef NS_ENUM(NSUInteger, FSNewWindowFlag) {
    /** @brief "NewWindow" flag is <b>false</b>. */
    e_newWindowFlagFalse = 0,
    /** @brief "NewWindow" flag is <b>true</b>. */
    e_newWindowFlagTrue,
    /** @brief No "NewWindow" flag. */
    e_newWindowFlagNone
};

/**
 * @brief	Class to represent destination information.
 *
 * @details	A destination defines a particular view of a PDF document, consisting of the following items:
 *			<ul>
 *			<li>The page of the document to be displayed.</li>
 *			<li>The location of the document window on that page.</li>
 *			<li>The magnification (zoom) factor to use when displaying the page.</li>
 *			</ul>
 *			Destinations may be associated with bookmarks, link annotations, or some types of actions.
 *			In each case, the destination specifies the view of the document to be presented when the bookmark
 *			item or link annotation is opened or the action is performed.<br>
 *			This class offers functions to create destination objects for different zoom mode, and get destination data.
 *
 * @see FSBookmark
 * @see FSLink
 * @see FSGotoAction
 */
@interface FSDestination : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief	Create a destination for zoom mode {@link FSZoomMode::e_zoomXYZ}.
 *
 * @param[in]	page			The destination page.
 * @param[in]	left			Horizontal coordinate value of a position as page's left-top position.
 * @param[in]	top				Vertical coordinate value of a position as page's left-top position.
 * @param[in]	zoomFactor		Zoom factor value.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createXYZ: (FSPDFPage*)page left: (float)left top: (float)top zoomFactor: (float)zoomFactor;
/**
 * @brief	Create a destination for zoom mode {@link FSZoomMode::e_zoomFitPage}.
 *
 * @param[in]	page	The destination page.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitPage: (FSPDFPage*)page;
/**
 * @brief	Create a destination for zoom mode {@link FSZoomMode::e_zoomFitHorz}.
 *
 * @param[in]	page	The destination page.
 * @param[in]	top		Vertical coordinate of top edge.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitHorz: (FSPDFPage*)page top: (float)top;
/**
 * @brief	Create a destination for zoom mode {@link FSZoomMode::e_zoomFitVert}.
 *
 * @param[in]	page	The destination page.
 * @param[in]	left	Horizontal coordinate of left edge.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitVert: (FSPDFPage*)page left: (float)left;
/**
 * @brief	Create a destination for zoom mode {@link FSZoomMode::e_zoomFitRect}.
 *
 * @param[in]	page		The destination page.
 * @param[in]	left		The coordinate left of a rectangle.
 * @param[in]	bottom		The coordinate bottom of a rectangle.
 * @param[in]	right		The coordinate right of a rectangle.
 * @param[in]	top			The coordinate top of a rectangle.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitRect: (FSPDFPage*)page left: (float)left bottom: (float)bottom right: (float)right top: (float)top;
/**
 * @brief	Create a destination for zoom mode {@link FSZoomMode::e_zoomFitBBox}.
 *
 * @param[in]	page		The destination page.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitBBox: (FSPDFPage*)page;
/**
 * @brief	Create a destination for zoom mode {@link FSZoomMode::e_zoomFitBHorz}.
 *
 * @param[in]	page		The destination page.
 * @param[in]	top			Vertical coordinate of top edge
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitBHorz: (FSPDFPage*)page top: (float)top;
/**
 * @brief	Create a destination for zoom mode {@link FSZoomMode::e_zoomFitBVert}.
 *
 * @param[in]	page	The destination page.
 * @param[in]	left	Horizontal coordinate of left edge.
 *
 * @return	A new destination object.
 */
+(FSDestination*)createFitBVert: (FSPDFPage*)page left: (float)left;
/**
 * @brief	Get the index of the destination page.
 *
 * @return	The page index, starting from 0.
 *			If there is any error, this function will return -1.
 */
-(int)getPageIndex;
/**
 * @brief	Get the zoom mode
 *
 * @return	Zoom mode value. Please refer to {@link FSZoomMode::e_zoomXYZ FSZoomMode::e_zoomXXX} values and it would be one of them.
 *			If there is any error, this function will return 0.
 */
-(FSZoomMode)getZoomMode;
/**
 * @brief	Get left position value.
 *
 * @details	This is only useful when zoom mode is {@link FSZoomMode::e_zoomXYZ}, {@link FSZoomMode::e_zoomFitVert}, {@link FSZoomMode::e_zoomFitRect} or {@link FSZoomMode::e_zoomFitBVert}.
 *			For other zoom mode, this function will return 0.0f.
 *
 * @return	The left position value.
 */
-(float)getLeft;
/**
 * @brief	Get top position value.
 *
 * @details	This is only useful when zoom mode is {@link FSZoomMode::e_zoomXYZ}, {@link FSZoomMode::e_zoomFitHorz}, {@link FSZoomMode::e_zoomFitBHorz} or {@link FSZoomMode::e_zoomFitRect}.
 *			For other zoom mode, this function will return 0.0f.
 *
 * @return	The top position value.
 */
-(float)getTop;
/**
 * @brief	Get right position value.
 *
 * @details	This is only useful when zoom mode is {@link FSZoomMode::e_zoomFitRect}.
 *			For other zoom mode, this function will return 0.0f.
 *
 * @return	The right position value.
 */
-(float)getRight;
/**
 * @brief	Get bottom position value.
 *
 * @details	This is only useful when zoom mode is {@link FSZoomMode::e_zoomFitRect}.
 *			For other zoom mode, this function will return 0.0f.
 *
 * @return	The bottom position value.
 */
-(float)getBottom;
/**
 * @brief	Get zoom factor.
 *
 * @details	This is only useful when zoom mode is {@link FSZoomMode::e_zoomXYZ}.
 *			For other zoom mode, this function will return 0.0f.
 *
 * @return	The zoom factor.
 */
-(float)getZoomFactor;

/** @brief Free the object. */
-(void)dealloc;

@end

/**
 * @brief	Class to access a PDF action.
 *
 * @details	PDF supports following standard action types:<br>
 *			"Go-To Action", "Remote Go-To Action", "Embedded Go-To Action", "Launch Action", "Thread Action",
 *			"URI Action", "Sound Action", "Movie Action", "Hide Action", "Named Action", "Submit-Form Action",
 *			"Reset-Form Action", "Import-Data Action", "JavaScript Action", "Set-OCG-State Action", "Rendition Action",
 *			"Transition Action", "Go-To-3D-View Action".<br>
 *			A PDF action may have sub-actions. When this action is triggered, its sub-actions should also be triggered in turn.<br>
 *			Class ::FSAction is the base class for all kinds of PDF actions. For concrete action types, please refer to derived classes.
 *			Function {@link FSLink::getAction} can be used to get an action from a link annotation.
 *			Function {@link FSAction::create:actType:} can be used to create a new action -- currently only support {@link FSActionType::e_actionTypeGoto}, and {@link FSActionType::e_actionTypeURI}.
 *			This class also offers functions to access sub-actions.
 *
 * @see	FSLink
 */
@interface FSAction : NSObject
{
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    void *swigCPtr;
    /** @brief SWIG proxy related property, it's deprecated to use it. */
    BOOL swigCMemOwn;
}
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief	Create a new empty action, with specified action type.
 *
 * @details	The newly created action has no action data (except action type) yet.
 *			User needs to call the methods in concrete action classes to set action data.
 *
 * @param[in]	doc		The PDF document, which the new action belongs to. It should be valid.
 * @param[in]	actType		Action type, used to specify which action is to be created.
 *							Currently only support:<br>
 *							{@link FSActionType::e_actionTypeGoto}, {@link FSActionType::e_actionTypeURI}.
 *
 * @return	A new action object, with no action data.
 *			If there is any error, this function will return <b>nil</b>.
 */
+(FSAction*) create :(FSPDFDoc*)doc   actType:(FSActionType) actType;
/**
 * @brief	Get action type.
 *
 * @return	Action type. Please refer to {@link FSActionType::e_actionTypeGoto FSActionType::e_actionTypeXXX} values and it would be one of them.
 */
-(FSActionType)getType;
/**
 * @brief	Get the count of sub-actions.
 *
 * @return	The count of sub-actions.
 */
-(int)getSubActionCount;
/**
 * @brief	Get the sub-actions by index.
 *
 * @param[in]	index	 Index of sub-action to be retrieved. Valid range: from 0 to (<i>count</i>-1).
 *						<i>count</i> is returned by function {@link FSAction::getSubActionCount}.
 *
 * @return	A action instance for sub-action.
 *			If there is any error, this function will return <b>nil</b>.
 */
-(FSAction*)getSubAction: (int)index;
/**
 * @brief	Set the sub-action by index.
 *
 * @param[in]	index	 Index of sub-action to be retrieved. Valid range: from 0 to (<i>count</i>-1).<i>count</i> is returned by function {@link FSAction::getSubActionCount}.
 * @param[in]	subAction	New sub-action to be set.
 *							Currently only support following types as the new sub-action:<br>
 *							{@link FSActionType::e_actionTypeGoto}, {@link FSActionType::e_actionTypeURI}.
 */
-(void)setSubAction : (int)index  subAction:(FSAction*)subAction;
/**
 * @brief	Insert a new sub-action to the location specified by index.
 *
 * @param[in]	index	 Index of the location, where the new sub-action is inserted. <br>
 *							If this index value is below zero, the new sub-action will be inserted to be the first.<br>
 *							If this index value equals or larger than current sub-action count, the new sub-action will be inserted to be the last.
 * @param[in]	subAction	New sub-action to be inserted.
 *							Currently only support following types as the new sub-action:<br>
 *							{@link FSActionType::e_actionTypeGoto}, {@link FSActionType::e_actionTypeURI}.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)insertSubAction :(int)index  subAction:(FSAction*)subAction;

/**
 * @brief	Remove a sub-action, specified by index.
 *
 * @param[in]	index 	Index of sub-action to be retrieved. Valid range: from 0 to (<i>count</i>-1).
 *						<i>count</i> is returned by function {@link FSAction::getSubActionCount}.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)removeSubAction : (int)index;

/**
 * @brief	Remove all the sub-actions.
 *
 * @return	<b>YES</b> means success, while <b>NO</b> means failure.
 */
-(BOOL)removeAllSubActions;

/** @brief Free the object. */
-(void)dealloc;

@end

/**
 * @brief	Class to access a go-to action.
 *
 * @details	Go-to action is an action that changes the view to a specified destination (page, location, and magnification factor).<br>
 *			Class ::FSGotoAction is derived from ::FSAction and offers functions to access go-to action data.
 *
 * @see FSAction
 */
@interface FSGotoAction : FSAction
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief	Get the destination which the action will jump to.
 *
 * @return	A destination instance object.
 *			If there is any error, this function will return <b>nil</b>.
 */
-(FSDestination*)getDestination;
/**
 * @brief	Set the destination information.
 *
 * @param[in]	dest	New destination object to be set.
 */
-(void)setDestination : (FSDestination*)dest;

/** @brief Free the object. */
-(void)dealloc;

@end

/**
 * @brief	Class to access a uniform resource identifier (URI) action.
 *
 * @details	URI action is an action that causes a URI to be resolved.
 *			Class ::FSURIAction is derived from ::FSAction and offers functions to access URI action data.
 *
 * @see FSAction
 */
@interface FSURIAction : FSAction
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief	Get the URI string.
 *
 * @return	URI string.
 */
-(NSString *)getURI;
/**
 * @brief	Set the URI string.
 *
 * @param[in]	uri		New URI string to be set.
 */
-(void)setURI : (NSString*)uri;

/**
 * @brief	Set the value for tracking position flag.
 *
 * @param[in]	isTrackPosition		New boolean value to be set:<br>
 *									<b>YES</b> means to track position, while <b>NO</b> means not to track position.
 */
-(void)setTrackPositionFlag : (BOOL)isTrackPosition;
/**
 * @brief	Check whether to track the mouse position when the URI is resolved.
 *
 * @return	<b>YES</b> means application should track the mouse position,
 *			while <b>NO</b> means no need to track the mouse position.
 */
-(BOOL)isTrackPosition;

/** @brief Free the object. */
-(void)dealloc;

@end

/**
 * Remote go-to action is similar to an ordinary go-to action but jumps to a destination in another PDF file
 * (not embedded file) instead of current PDF file (which contains the remote go-to action). <br>
 * Class FSRemoteGotoAction is derived from FSAction and offers functions to get/set remote go-to action data.
 * Destination information of a remote go-to action can be represents as either a destination array or
 * a destination name:
 * <ul>
 * <li>If the destination information is a destination array, Foxit PDF SDK uses a FSDestination object to
 *     represent it and function {@link FSRemoteGotoAction::GetDestination} can be used to get such value.</li>
 * <li>If the destination information is a destination name, Foxit PDF SDK uses a string to represent it and function
 *     {@link FSRemoteGotoAction::GetDestinationName} can be used to get such value.
 *     Specially, the related destination array is defined in the target PDF file, not current PDF file.
 *     User can use functions in class FSPDFNameTree to retrieve the actual destination array from target PDF file.
 * </li>
 * </ul>
 * Destination PDF file and destination information are necessary for a remote go-to action, so user should
 * ensure to set both data by function {@link FSRemoteGotoAction::SetFileSpec} and function
 * {@link FSRemoteGotoAction::SetDestination} or {@link FSRemoteGotoAction::SetDestinationName},
 * especially for a new remote go-to action; otherwise, the remote go-to action would be useless.
 *
 * @see FSAction
 */
@interface FSRemoteGotoAction : FSAction
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief Get the destination information.
 *
 * @details For a remote go-to action, the destination information can be stored
 *          as either a FSDestination object or a destination name:
 *          <ul>
 *          <li>If it is a FSDestination object,
 *          function {@link FSRemoteGotoAction::GetDestination} would return a valid FSDestination object.</li>
 *          <li>If it is a destination name,
 *          function {@link FSRemoteGotoAction::GetDestinationName} would return a valid string,
 *          and the destination name would be defined in the target PDF file.</li>
 *          </ul>
 *          If the remote go-to action does not have any destination information,
 *          function {@link FSRemoteGotoAction::GetDestination} would return <b>NULL</b>
 *          and function {@link FSRemoteGotoAction::GetDestinationName} would return an empty string.
 *
 * @return A destination object.
 *         If this function returns <b>NULL</b>, please try function {@link FSRemoteGotoAction::GetDestinationName}.
 */
-(FSDestination*)getDestination;
/**
 * @brief Set the destination information, which is used to specify the position in target PDF file to jump to.
 *
 * @param[in] destination  New destination object to be set. It should be valid.
 *
 * @return None.
 */
-(void)setDestination: (FSDestination*)destination;
/**
 * @brief Get the destination name, which is defined in target PDF file.
 *
 * @details For a remote go-to action, the destination information can be stored as
 *          either a FSDestination object or a destination name:
 *          <ul>
 *          <li>If it is a FSDestination object, function {@link FSRemoteGotoAction::GetDestination} would
 *              return a valid FSDestination object.</li>
 *          <li>If it is a destination name, function {@link FSRemoteGotoAction::GetDestinationName} would
 *              return a valid string, and the destination name would be defined in the target PDF file.</li>
 *          </ul>
 *          If the remote go-to action does not have any destination information,
 *          function {@link FSRemoteGotoAction::GetDestination} would return <b>NULL</b>
 *          and function {@link FSRemoteGotoAction::GetDestinationName} would return an empty string.
 *
 * @return The destination name, in UTF-8 encoding.
 *         If this function returns an empty string, please try function {@link FSRemoteGotoAction::GetDestination}.
 */
-(NSString*)getDestinationName;
/**
 * @brief Set the destination name.
 *
 * @details The destination name should have been in the "Dests" name tree in the target PDF file.
 *
 * @param[in] dest_name  New destination name to be set, in UTF-8 encoding. It should be not be <b>NULL</b> and empty.
 *
 * @return None.
 */
-(void)setDestinationName: (NSString *)destName;
/**
 * @brief Get the file specification which specifies the destination file.
 *
 * @return A non-embedded file specification object.
 */
-(FSFileSpec*)getFileSpec;
/**
 * @brief Set the file specification which specifies the destination file.
 *
 * @param[in]  file_specification  The file specification object. It should not be <b>NULL</b>.
 *                                 This object should belong to the same PDF file as current action.
 *                                 It should represent another PDF file as the target file, and should not
 *                                 represent an embedded file.
 *
 * @return None.
 */
-(void)setFileSpec: (FSFileSpec*)fileSpecification;
/**
 * @brief Get the flag to decide whether to open the destination document in a new window or not.
 *
 * @return Flag for new window. It would be one of following values:<br>
 *         <ul>
 *         <li>{@link FSNewWindowFlag::e_newWindowFlagTrue FSNewWindowFlag::e_newWindowFlagTrue}
 *             means to open the destination document in a new window.</li>
 *         <li>{@link FSNewWindowFlag::e_newWindowFlagFalse FSNewWindowFlag::e_newWindowFlagFalse}
 *             means to the destination document replaces current document in the same window.</li>
 *         <li>{@link FSNewWindowFlag::e_newWindowFlagNone FSNewWindowFlag::e_newWindowFlagNone}
 *             means no such flag and the viewer application should behave in accordance
 *             with the current user preference.</li>
 *         </ul>
 */
-(FSNewWindowFlag)getNewWindowFlag;
/**
 * @brief Set the flag to decide whether to open the destination document in a new window or not.
 *
 * @param[in] flag  Flag for new window. It should be one of following values:<br>
 *                  <ul>
 *                  <li>{@link FSNewWindowFlag::e_newWindowFlagTrue FSNewWindowFlag::e_newWindowFlagTrue}
 *                      means to open the destination document in a new window.</li>
 *                  <li>{@link FSNewWindowFlag::e_newWindowFlagFalse FSNewWindowFlag::e_newWindowFlagFalse}
 *                      means to the destination document replaces current document in the same window.</li>
 *                  <li>{@link FSNewWindowFlag::e_newWindowFlagNone FSNewWindowFlag::e_newWindowFlagNone}
 *                      means such flag is not needed and the viewer application should behave in accordance
 *                      with the current user preference.</li>
 *                  </ul>
 *
 * @return None.
 */
-(void)setNewWindowFlag: (FSNewWindowFlag)flag;

-(void)dealloc;

@end

/**
 * Launch action is to launch an application, usually to open a file.
 * Class FSLaunchAction is derived from FSAction and offers functions to get/set launch action data.
 *
 * @see FSAction
 */
@interface FSLaunchAction : FSAction
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(void*)getCptr;
/** @brief SWIG proxy related function, it's deprecated to use it. */
-(id)initWithCptr: (void*)cptr swigOwnCObject: (BOOL)ownCObject;
/**
 * @brief Get the file specification which specifies the application to be launched
 *        or the document to be opened or printed.
 *
 * @return A file specification object. <b>NULL</b> means no such property is found.
 */
-(FSFileSpec*)getFileSpec;
/**
 * @brief Set the file specification which an application to be launched
 *        or a document to be opened or printed.
 *
 * @param[in] file_specification  The file specification object. It should be valid.
 *                                This object should be in the same document with current action object.
 *
 * @return None.
 */
-(void)setFileSpec: (FSFileSpec*)fileSpecification;
/**
 * @brief Get the flag to decide whether to open the destination document in a new window or not.
 *
 * @return Flag for new window. It would be one of following values:<br>
 *         <ul>
 *         <li>{@link FSNewWindowFlag::e_newWindowFlagTrue FSNewWindowFlag::e_newWindowFlagTrue}
 *             means to open the destination document in a new window.</li>
 *         <li>{@link FSNewWindowFlag::e_newWindowFlagFalse FSNewWindowFlag::e_newWindowFlagFalse}
 *             means to the destination document replaces current document in the same window.</li>
 *         <li>{@link FSNewWindowFlag::e_newWindowFlagNone FSNewWindowFlag::e_newWindowFlagNone}
 *             means no such flag and the viewer application should behave in accordance
 *             with the current user preference.</li>
 *         </ul>
 */
-(FSNewWindowFlag)getNewWindowFlag;
/**
 * @brief Set the flag to decide whether to open the destination document in a new window or not.
 *
 * @param[in] flag  Flag for new window. It should be one of following values:<br>
 *                  <ul>
 *                  <li>{@link FSNewWindowFlag::e_newWindowFlagTrue FSNewWindowFlag::e_newWindowFlagTrue}
 *                      means to open the destination document in a new window.</li>
 *                  <li>{@link FSNewWindowFlag::e_newWindowFlagFalse FSNewWindowFlag::e_newWindowFlagFalse}
 *                      means to the destination document replaces current document in the same window.</li>
 *                  <li>{@link FSNewWindowFlag::e_newWindowFlagNone FSNewWindowFlag::e_newWindowFlagNone}
 *                      means no such flag and the viewer application should behave in accordance
 *                      with the current user preference.</li>
 *                  </ul>
 *
 * @return None.
 */
-(void)setNewWindowFlag: (FSNewWindowFlag)flag;
/**
 * @brief (Windows-specific launch parameters)
 *        Get the file name of the application to be launched or the document to be opened or printed.
 *
 * @return File name, in UTF-8 encoding.
 */
-(NSString*)getWinFileName;
/**
 * @brief (Windows-specific launch parameters)Get the default directory in standard DOS syntax.
 *
 * @return Default directory, in UTF-8 encoding.
 */
-(NSString*)getWinDefaultDirectory;
/**
 * @brief (Windows-specific launch parameters)Get the operation name.
 *
 * @details Standard strings for operation name are:
 *          <ul>
 *          <li>"open": Open a document.</li>
 *          <li>"Print": Print a document</li>
 *          </ul>
 *          If the file name of Windows-specific launch parameters represents an application,
 *          the operation name would be useless for current action.
 *
 * @return Operation name, an ASCII string.
 */
-(NSString*)getWinAppOperation;
/**
 * @brief (Windows-specific launch parameters)Get parameter string to be passed to the specified application.
 *
 * @details If the file name of Windows-specific launch parameters represents a document,
 *          app parameter string is ignored.
 *
 * @return Parameter string, in UTF-8 encoding.
 */
-(NSString*)getWinAppParameter;
/**
 * @brief (Windows-specific launch parameters)Set Windows-specific launch parameters.
 *
 * @details This function is used to set Windows- specific launch parameters.
 *          Parameter <i>file_name</i> is necessary and can represent either an application or a document.
 *          When parameter <i>file_name</i> represents an application, parameters <i>operation</i> and
 *          <i>app_parameter</i> are useless.
 *
 * @param[in] file_name          The file name of the application to be launched
 *                               or the document to be opened or printed.
 * @param[in] default_directory  Default directory in standard DOS syntax.
 *                               This can be <b>NULL</b> or empty.
 * @param[in] operation          Operation name, an ASCII string. This can be <b>NULL</b> or empty.
 *                               If this is valid, it should be one of following strings:
 *                               <ul>
 *                               <li>"open": Open a document.</li>
 *                               <li>"Print": Print a document</li>
 *                               </ul>
 * @param[in] app_parameter      Parameter string to be passed to the specified application.
 *                               This can be <b>NULL</b> or empty. 
 *
 * @return None.
 */
-(void)setWinLaunchParameter: (NSString *)fileName defaultDirectory: (NSString *)defaultDirectory operation: (NSString *)operation appParameter: (NSString *)appParameter;

-(void)dealloc;

@end

NS_ASSUME_NONNULL_END
